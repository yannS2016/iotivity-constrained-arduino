--- messaging/coap/engine_new.c	2019-03-04 20:49:37.226791060 +0000
+++ messaging/coap/engine.c	2019-03-04 20:35:40.975642345 +0000
@@ -80,8 +80,31 @@
 #endif /* !OC_BLOCK_WISE */
 
 #define OC_REQUEST_HISTORY_SIZE (250)
+#ifdef OC_XMEM
+/*AVR Memory Usage
+----------------
+Device: atmega2560
+
+Program:   79956 bytes (30.5% Full)
+(.text + .data + .bootloader)
+
+Data:       5952 bytes (72.7% Full)
+(.data + .bss + .noinit)*/
+static uint16_t *history;
+static uint8_t *history_dev;
+#else
+/*
+Device: atmega2560
+
+Program:   79770 bytes (30.4% Full)
+(.text + .data + .bootloader)
+
+Data:       6698 bytes (81.8% Full)
+(.data + .bss + .noinit)
+*/
 static uint16_t history[OC_REQUEST_HISTORY_SIZE];
 static uint8_t history_dev[OC_REQUEST_HISTORY_SIZE];
+#endif
 static uint8_t idx;
 
 static bool
@@ -123,7 +146,18 @@
 coap_receive(oc_message_t *msg)
 {
   coap_status_code = COAP_NO_ERROR;
-
+  
+  #ifdef OC_XMEM
+  if(!history || !history_dev) {
+    OC_DBG("Allocating history buffers");
+      history = malloc(OC_REQUEST_HISTORY_SIZE);
+    history_dev = malloc(OC_REQUEST_HISTORY_SIZE);
+    if(!history || !history_dev) {
+      OC_ERR("Unable the allocated request history buffers");
+      return -1;
+    }
+  }
+  #endif
   OC_DBG("CoAP Engine: received datalen=%u from",
          (unsigned int)msg->length);
   OC_LOGipaddr(msg->endpoint);
--- oc_log_old.h	2019-03-04 20:57:00.607291966 +0000
+++ oc_log.h	2019-03-04 18:11:01.484615447 +0000
@@ -18,18 +18,29 @@
 #define OC_LOG_H
 
 #include <stdio.h>
-
+// the size of OC_PDU_SIZE and OC_MAX_APP_DATA_SIZE
 #ifdef __cplusplus
 extern "C"
 {
 #endif
+#ifdef ARDUINO
+#include "Arduino.h"
+#ifdef __cplusplus
+#define PCF(str)  ((PROGMEM const char *)(F(str)))
+#else
+#define PCF(str)  ((PROGMEM const char *)(PSTR(str)))
+#endif
+// from: https://stackoverflow.com/questions/18968070/error-when-defining-a-stringising-macro-with-va-args
+#define PRINT(format, ...)  printf_P(PCF(format), ##__VA_ARGS__)
+#else
+#define PRINT(...) printf(__VA_ARGS__)	
+#endif
 
-#define PRINT(...) printf(__VA_ARGS__)
 
 #define PRINTipaddr(endpoint)                                                  \
   do {                                                                         \
     if ((endpoint).flags & IPV4) {                                             \
-      PRINT("[%d.%d.%d.%d]:%d", ((endpoint).addr.ipv4.address)[0],             \
+      PRINT("[%d.%d.%d.%d]:%u", ((endpoint).addr.ipv4.address)[0],             \
             ((endpoint).addr.ipv4.address)[1],                                 \
             ((endpoint).addr.ipv4.address)[2],                                 \
             ((endpoint).addr.ipv4.address)[3], (endpoint).addr.ipv4.port);     \
@@ -37,7 +48,7 @@
       PRINT(                                                                   \
         "[%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%"    \
         "02x%"                                                                 \
-        "02x]:%d",                                                             \
+        "02x]:%u",                                                             \
         ((endpoint).addr.ipv6.address)[0], ((endpoint).addr.ipv6.address)[1],  \
         ((endpoint).addr.ipv6.address)[2], ((endpoint).addr.ipv6.address)[3],  \
         ((endpoint).addr.ipv6.address)[4], ((endpoint).addr.ipv6.address)[5],  \
@@ -52,38 +63,45 @@
     }                                                                          \
   } while (0)
 
-#ifdef OC_DEBUG
+#ifdef ARDUINO
+#define OC_LOG(level, format, ...)                                             \
+  do {                                                                         \
+    PRINT("%s: <", level);                                                     \
+    PRINT(__FILE__":");                                                        \
+    PRINT("%s:%d>: ",__func__, __LINE__);                                      \
+    PRINT(format, ##__VA_ARGS__);                                              \
+		PRINT("\n");                                                               \
+  } while (0)
+#define OC_DBG(format, ...)   OC_LOG("DEBUG", format, ##__VA_ARGS__)
+#define OC_WRN(format, ...)   OC_LOG("WARNING", format,##__VA_ARGS__)
+#define OC_ERR(format, ...)   OC_LOG("ERROR", format, ##__VA_ARGS__)
+#else
+
 #define OC_LOG(level, ...)                                                     \
   do {                                                                         \
-    PRINT("%s: %s <%s:%d>: ", level, __FILE__, __func__, __LINE__);            \
+    PRINT("<%s:%s:%d>: ", level,__FILE__, __LINE__);                           \
     PRINT(__VA_ARGS__);                                                        \
-    PRINT("\n");                                                               \
+		PRINT("\n");                                                               \
   } while (0)
-#define OC_DBG(...) OC_LOG("DEBUG", __VA_ARGS__)
-#define OC_WRN(...) OC_LOG("WARNING", __VA_ARGS__)
-#define OC_ERR(...) OC_LOG("ERROR", __VA_ARGS__)
+#define OC_DBG(...)   OC_LOG("DEBUG",__VA_ARGS__)
+#define OC_WRN(...)   OC_LOG("WARNING",__VA_ARGS__)
+#define OC_ERR(...)   OC_LOG("ERROR", __VA_ARGS__)
+#endif
+
 #define OC_LOGipaddr(endpoint)                                                 \
   do {                                                                         \
-    PRINT("DEBUG: %s <%s:%d>: ", __FILE__, __func__, __LINE__);                \
+    PRINT("DEBUG: <%d>: ", __LINE__);                                          \
     PRINTipaddr(endpoint);                                                     \
     PRINT("\n");                                                               \
   } while (0)
 #define OC_LOGbytes(bytes, length)                                             \
   do {                                                                         \
-    PRINT("DEBUG: %s <%s:%d>: ", __FILE__, __func__, __LINE__);                \
+    PRINT("DEBUG: <%d>: ", __LINE__);                                          \
     uint16_t i;                                                                \
     for (i = 0; i < length; i++)                                               \
       PRINT(" %02X", bytes[i]);                                                \
     PRINT("\n");                                                               \
-  } while (0)
-#else
-#define OC_LOG(...)
-#define OC_DBG(...)
-#define OC_WRN(...)
-#define OC_ERR(...)
-#define OC_LOGipaddr(endpoint)
-#define OC_LOGbytes(bytes, length)
-#endif
+  } while (0)	
 
 #ifdef __cplusplus
 }
--- observe_old.c	2019-03-04 21:02:27.157578690 +0000
+++ observe.c	2019-03-04 16:51:13.381567176 +0000
@@ -609,7 +609,7 @@
         }   // response_buf != NULL
       }     //! separate response
     }       // iterate over observers
-  leave_notify_observers:
+  leave_notify_observers:;
 #ifdef OC_DYNAMIC_ALLOCATION
     if (buffer) {
       free(buffer);
