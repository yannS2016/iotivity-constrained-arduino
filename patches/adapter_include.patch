diff -ru iotivity-constrained/port/arduino/adapter/include/arduino_log.h include/arduino_log.h
--- iotivity-constrained/port/arduino/adapter/include/arduino_log.h	2019-01-17 16:29:22.887343901 +0000
+++ include/arduino_log.h	2019-01-17 16:26:50.397053739 +0000
@@ -0,0 +1,13 @@
+#ifndef __ARDUINOLOG_H__
+#define __ARDUINOLOG_H__
+
+#include "Arduino.h"
+#ifdef __cplusplus
+#define PCF(str)  ((PROGMEM const char *)(F(str)))
+#else
+#define PCF(str)  ((PROGMEM const char *)(PSTR(str)))
+#endif
+
+
+ 
+#endif /* __ARDUINOLOG_H__ */
diff -ru iotivity-constrained/port/arduino/adapter/include/oc_config.h include/oc_config.h
--- iotivity-constrained/port/arduino/adapter/include/oc_config.h	2019-01-17 16:30:19.467450714 +0000
+++ include/oc_config.h	2019-01-17 16:26:50.397053739 +0000
@@ -0,0 +1,56 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+
+/* Time resolution */
+#include <stdint.h>
+#include <TimeLib.h>
+
+#define OCF_MCAST_PORT_UNSECURED (5683)
+#define OCF_SERVER_PORT_UNSECURED (56789)
+/** Multicast IP address.*/
+#define OCF_IPv4_MULTICAST      "224.0.1.187"
+//arduino does not define a 64 bits int
+typedef uint32_t oc_clock_time_t;
+/* 1 clock tick = 1ms or 1 ticks   1000 ticks -- 1 s --- 1000 ticks --- 1000ms --- 1 tick -- 1 ms*/
+#define OC_CLOCK_CONF_TICKS_PER_SECOND (1)
+#define OC_BYTES_POOL_SIZE (600)
+#define OC_INTS_POOL_SIZE (100)
+#define OC_DOUBLES_POOL_SIZE (4)
+
+/* Server-side parameters */
+/* Maximum number of server resources */
+#define OC_MAX_APP_RESOURCES (4)
+
+#define OC_MAX_NUM_COLLECTIONS (1)
+
+/* Common paramters */
+/* Prescriptive lower layers MTU size, enable block-wise transfers */
+#define OC_BLOCK_WISE_SET_MTU (700)
+
+/* Maximum size of request/response payloads */
+#define OC_MAX_APP_DATA_SIZE (1024)
+
+/* Maximum number of concurrent requests */
+#define OC_MAX_NUM_CONCURRENT_REQUESTS (3)
+
+/* Maximum number of nodes in a payload tree structure */
+#define OC_MAX_NUM_REP_OBJECTS (150)
+
+/* Number of devices on the OCF platform */
+#define OC_MAX_NUM_DEVICES (2)
+
+/* Maximum number of endpoints */
+#define OC_MAX_NUM_ENDPOINTS (20)
+
+/* Security layer */
+/* Maximum number of authorized clients */
+#define OC_MAX_NUM_SUBJECTS (2)
+
+/* Maximum number of concurrent DTLS sessions */
+#define OC_MAX_DTLS_PEERS (1)
+
+/* Max inactivity timeout before tearing down DTLS connection */
+#define OC_DTLS_INACTIVITY_TIMEOUT (10)
+
+
+#endif /* CONFIG_H */
diff -ru iotivity-constrained/port/arduino/adapter/include/utils.h include/utils.h
--- iotivity-constrained/port/arduino/adapter/include/utils.h	2019-01-17 16:29:56.937408235 +0000
+++ include/utils.h	2019-01-17 16:26:50.397053739 +0000
@@ -0,0 +1,21 @@
+#ifndef __UTILS_H__
+#define __UTILS_H__
+#include <stdint.h>
+#include <stdlib.h> 
+#include "Arduino.h" 
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef __cplusplus
+#define PCF(str)  ((PROGMEM const char *)(F(str)))
+#else
+#define PCF(str)  ((PROGMEM const char *)(PSTR(str)))
+#endif
+    
+#ifdef __cplusplus
+}
+#endif
+ 
+#endif /* __UTILS_H__ */
diff -ru iotivity-constrained/port/arduino/adapter/include/wiznet_inc/ard_eth_adptr_srv.h include/wiznet_inc/ard_eth_adptr_srv.h
--- iotivity-constrained/port/arduino/adapter/include/wiznet_inc/ard_eth_adptr_srv.h	2019-01-17 16:29:22.887343901 +0000
+++ include/wiznet_inc/ard_eth_adptr_srv.h	2019-01-17 16:26:50.397053739 +0000
@@ -0,0 +1,58 @@
+/******************************************************************
+*
+* Copyright 2014 Samsung Electronics All Rights Reserved.
+*
+*
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*      http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*
+******************************************************************/
+#ifndef ARD_ETH_ADPTR_SRV_
+#define ARD_ETH_ADPTR_SRV_
+
+#include "ard_eth_adptr_utls.h"
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+typedef void (* ard_eth_udp_callback)(uint8_t *sender_addr, uint16_t *sender_port,
+                                     uint8_t *data, const uint16_t dataLength);
+                                    
+OCResult_t start_arduino_servers();
+OCResult_t ard_ucast_server_shutdown();                                       
+OCResult_t ard_mcast_server_shutdown();
+void ard_servers_shutdown();
+
+OCResult_t start_arduino_ucast_server(uint16_t *local_port);
+
+OCResult_t start_arduino_mcast_server(const char *mcast_addr, uint16_t *mcast_port, uint16_t *local_port);	
+
+                                        
+// definitions for hadling the reception of data
+// and com with the itovity constrained stack
+void ard_sock_poll_data();
+/** Retrieve any available data from UDP socket and call callback.
+ *  This is a non-blocking call.
+ */
+OCResult_t ard_sock_get_data(uint8_t *socketID);
+// call this method from user init code
+//OCResult_t arduino_recv_data(uint8_t *sockFd);                          
+void set_ard_packet_recvcb(ard_eth_udp_callback cb);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* ARD_ETH_ADPTR_SRV */
diff -ru iotivity-constrained/port/arduino/adapter/include/wiznet_inc/ard_eth_adptr_utls.h include/wiznet_inc/ard_eth_adptr_utls.h
--- iotivity-constrained/port/arduino/adapter/include/wiznet_inc/ard_eth_adptr_utls.h	2019-01-17 16:29:22.887343901 +0000
+++ include/wiznet_inc/ard_eth_adptr_utls.h	2019-01-17 16:26:50.397053739 +0000
@@ -0,0 +1,145 @@
+/* ****************************************************************
+ *
+ * Copyright 2014 Samsung Electronics All Rights Reserved.
+ *
+ *
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ******************************************************************/
+/**
+ * @file
+ * This file provides APIs ethernet client/server/network monitor modules.
+ */
+
+#ifndef OC_ARD_ETH_ADPTR_UTILS_
+#define OC_ARD_ETH_ADPTR_UTILS_
+
+#include <stdint.h>
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+//#include "utils.h"
+typedef enum
+{
+	/** Success status code - START HERE.*/
+	STATUS_OK = 0,
+	STATUS_FAILED = -1,
+	SOCKET_OPERATION_FAILED = -2,
+	STATUS_INVALID_PARAM = 1,
+	SERVER_STARTED_ALREADY = 2,
+} OCResult_t;
+
+
+/**
+ * Get available UDP socket.
+ * @param[out]   sockID         Available UDP socket ID.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */
+extern OCResult_t arduino_get_free_socket(uint8_t *sockID);
+
+/**
+ * Initialize Unicast UDP socket.
+ * @param[in/out]   port        Port to start the unicast server.
+ * @param[out]      socketID    Unicast socket ID.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */
+extern OCResult_t arduino_init_udp_socket(uint16_t *local_port, uint8_t *socketID);
+
+/**
+ * Initialize Multicast UDP socket.
+ * @param[in]   mcastAddress     Port to start the unicast server.
+ * @param[in]   mport            Multicast port.
+ * @param[in]   lport            Local port on which the server is started.
+ * @param[out]  socketID         Multicast socket ID.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */
+																					
+extern OCResult_t arduino_init_mcast_udp_socket(const char *mcast_addr, uint16_t *mcast_port, 
+																						     uint16_t *local_port, uint8_t *socketID);																				
+/**
+ * To parse the IP address and port from "ipaddress:port".
+ * @param[in]   ipAddrStr       IP address to be parsed.
+ * @param[out]  ipAddr          Parsed IP address.
+ * @param[in]   ipAddr          Buffer length for parsed IP address.
+ * @param[out]  port            Parsed Port number.
+ * @return ::CA_STATUS_OK or Appropriate error code.
+ */
+extern OCResult_t arduino_parse_IPv4_addr(const char *ipAddrStr, uint8_t *ipAddr,
+                                      uint8_t ipAddrLen, uint16_t *port);
+/**
+ * set the socket ID for for unicast client mode.
+ * @param[in]  socketID         Unicast socket ID.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */																	
+extern OCResult_t set_ucast_socket(uint8_t *ucast_socketID);
+/**
+ * return the allocated unicast socket for client operation.
+ * @param[in]  none.
+ * @return  ::allocated unicast socket ID
+ */	
+ extern uint8_t get_ucast_socket();
+ extern bool discovery_enable(bool discovery);
+/**
+ * set the socket ID for for multiicast client mode.
+ * @param[in]  socketID         Multicast socket ID.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */	
+extern OCResult_t set_mcast_socket(uint8_t *mcast_socketID);
+/**
+ * return the allocated multicast socket for discovery operation.
+ * @param[in]  none.
+ * @return  ::allocated nulticast socket ID.
+ */	
+ extern uint8_t get_mcast_socket();
+/**
+ * set the unicast send port for client mode.
+ * @param[in]  ucast_port     unicast port.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */	
+extern OCResult_t set_ucast_port(uint16_t *ucast_port);
+/**
+ * set the multicast send port for client mode.
+ * @param[in]  mcast_socketID     multicast port.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */	
+extern OCResult_t set_mcast_port(uint8_t *mcast_socketID);
+/**
+ * send response  client/server mode.
+ * @param[in]  mcast_socketID     multicast port.
+ * @return  ::OC_STATUS_OK or Appropriate error code.
+ */	
+/**
+* Get the Interface Info(Allocated IP address)
+* @param[in] address  endpoint ipv4 address
+*/
+OCResult_t oc_ard_get_iface_addr(uint8_t *address);
+
+
+#ifdef OC_SERVER
+extern OCResult_t ard_send_data(uint8_t *dest_addr, 
+                               uint16_t *dest_port, 
+															 uint8_t *data, const uint16_t len);	
+#else 
+extern OCResult_t ard_send_data(uint8_t *dest_addr, 
+                               uint16_t *dest_port, 
+															 uint8_t *data, const uint16_t len, 
+                               uint8_t isMulticast);	
+#endif															 
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* OC_ARDUINO_ETHERNET_ADAPTER_UTILS_ */
