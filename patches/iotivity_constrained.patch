diff -ru iotivity-constrained/api/oc_ri.c iotivity-constrained_new/api/oc_ri.c
--- iotivity-constrained/api/oc_ri.c	2019-03-24 17:22:57.740959607 +0200
+++ iotivity-constrained_new/api/oc_ri.c	2019-03-24 17:22:52.856844177 +0200
@@ -1061,8 +1061,7 @@
      * altered the resource state, so attempt to notify all observers
      * of that resource with the change.
      */
-    if (!resource_is_collection && cur_resource &&
-        (method == OC_PUT || method == OC_POST) &&
+    if (cur_resource && (method == OC_PUT || method == OC_POST) &&
         response_buffer.code < oc_status_code(OC_STATUS_BAD_REQUEST))
       oc_ri_add_timed_event_callback_ticks(cur_resource,
                                            &oc_observe_notification_delayed, 0);
diff -ru iotivity-constrained/messaging/coap/engine.c iotivity-constrained_new/messaging/coap/engine.c
--- iotivity-constrained/messaging/coap/engine.c	2019-03-24 17:21:07.334349254 +0200
+++ iotivity-constrained_new/messaging/coap/engine.c	2019-03-24 17:03:51.473591324 +0200
@@ -80,8 +80,13 @@
 #endif /* !OC_BLOCK_WISE */
 
 #define OC_REQUEST_HISTORY_SIZE (250)
+#ifdef OC_DYNAMIC_ALLOCATION
+static uint16_t *history;
+static uint8_t *history_dev;
+#else
 static uint16_t history[OC_REQUEST_HISTORY_SIZE];
 static uint8_t history_dev[OC_REQUEST_HISTORY_SIZE];
+#endif
 static uint8_t idx;
 
 static bool
@@ -124,6 +129,17 @@
 {
   coap_status_code = COAP_NO_ERROR;
 
+#ifdef OC_DYNAMIC_ALLOCATION
+  if(!history || !history_dev) {
+    OC_DBG("Allocating history buffers");
+      history = malloc(OC_REQUEST_HISTORY_SIZE);
+    history_dev = malloc(OC_REQUEST_HISTORY_SIZE);
+    if(!history || !history_dev) {
+      OC_ERR("Unable the allocated request history buffers");
+      return -1;
+    }
+  }
+#endif
   OC_DBG("CoAP Engine: received datalen=%u from",
          (unsigned int)msg->length);
   OC_LOGipaddr(msg->endpoint);
diff -ru iotivity-constrained/messaging/coap/observe.c iotivity-constrained_new/messaging/coap/observe.c
--- iotivity-constrained/messaging/coap/observe.c	2019-03-24 17:21:07.334349254 +0200
+++ iotivity-constrained_new/messaging/coap/observe.c	2019-03-24 17:04:59.191238443 +0200
@@ -615,7 +615,7 @@
         }   // response_buf != NULL
       }     //! separate response
     }       // iterate over observers
-  leave_notify_observers:
+  leave_notify_observers:;
 #ifdef OC_DYNAMIC_ALLOCATION
     if (buffer) {
       free(buffer);
diff -ru iotivity-constrained/port/oc_log.h iotivity-constrained_new/port/oc_log.h
--- iotivity-constrained/port/oc_log.h	2019-03-24 17:21:07.334349254 +0200
+++ iotivity-constrained_new/port/oc_log.h	2019-03-24 16:56:44.306978716 +0200
@@ -20,18 +20,27 @@
 #define OC_LOG_H
 
 #include <stdio.h>
-
 #ifdef __cplusplus
 extern "C"
 {
 #endif
+#ifdef ARDUINO
+#include "Arduino.h"
+#ifdef __cplusplus
+#define PCF(str)  ((PROGMEM const char *)(F(str)))
+#else
+#define PCF(str)  ((PROGMEM const char *)(PSTR(str)))
+#endif
+#define PRINT(format, ...)  printf_P(PCF(format), ##__VA_ARGS__)
+#else
+#define PRINT(...) printf(__VA_ARGS__)  
+#endif
 
-#define PRINT(...) printf(__VA_ARGS__)
 
 #define PRINTipaddr(endpoint)                                                  \
   do {                                                                         \
     if ((endpoint).flags & IPV4) {                                             \
-      PRINT("[%d.%d.%d.%d]:%d", ((endpoint).addr.ipv4.address)[0],             \
+      PRINT("[%d.%d.%d.%d]:%u", ((endpoint).addr.ipv4.address)[0],             \
             ((endpoint).addr.ipv4.address)[1],                                 \
             ((endpoint).addr.ipv4.address)[2],                                 \
             ((endpoint).addr.ipv4.address)[3], (endpoint).addr.ipv4.port);     \
@@ -39,7 +48,7 @@
       PRINT(                                                                   \
         "[%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%"    \
         "02x%"                                                                 \
-        "02x]:%d",                                                             \
+        "02x]:%u",                                                             \
         ((endpoint).addr.ipv6.address)[0], ((endpoint).addr.ipv6.address)[1],  \
         ((endpoint).addr.ipv6.address)[2], ((endpoint).addr.ipv6.address)[3],  \
         ((endpoint).addr.ipv6.address)[4], ((endpoint).addr.ipv6.address)[5],  \
@@ -54,16 +63,43 @@
     }                                                                          \
   } while (0)
 
-#ifdef OC_DEBUG
+#ifdef ARDUINO
+#define OC_LOG(level, format, ...)                                             \
+  do {                                                                         \
+    PRINT(level " : " __FILE__ " <%s:%d>: ",__func__, __LINE__);               \
+    PRINT(format, ##__VA_ARGS__);                                              \
+    PRINT("\n");                                                               \
+  } while (0)
+#define OC_DBG(format, ...)   OC_LOG("DEBUG", format, ##__VA_ARGS__)
+#define OC_WRN(format, ...)   OC_LOG("WARNING", format,##__VA_ARGS__)
+#define OC_ERR(format, ...)   OC_LOG("ERROR", format, ##__VA_ARGS__)
+
+#define OC_LOGipaddr(endpoint)                                                 \
+  do {                                                                         \
+    PRINT("DEBUG: " __FILE__ " <%s:%d>: ",__func__, __LINE__);               \
+    PRINTipaddr(endpoint);                                                     \
+    PRINT("\n");                                                               \
+  } while (0)
+#define OC_LOGbytes(bytes, length)                                             \
+  do {                                                                         \
+    PRINT("DEBUG: " __FILE__ " <%s:%d>: ",__func__, __LINE__);               \
+    uint16_t i;                                                                \
+    for (i = 0; i < length; i++)                                               \
+      PRINT(" %02X", bytes[i]);                                                \
+    PRINT("\n");                                                               \
+  } while (0) 
+
+#else
 #define OC_LOG(level, ...)                                                     \
   do {                                                                         \
-    PRINT("%s: %s <%s:%d>: ", level, __FILE__, __func__, __LINE__);            \
+    PRINT("<%s:%s:%d>: ", level,__FILE__, __LINE__);                           \
     PRINT(__VA_ARGS__);                                                        \
     PRINT("\n");                                                               \
   } while (0)
-#define OC_DBG(...) OC_LOG("DEBUG", __VA_ARGS__)
-#define OC_WRN(...) OC_LOG("WARNING", __VA_ARGS__)
-#define OC_ERR(...) OC_LOG("ERROR", __VA_ARGS__)
+#define OC_DBG(...)   OC_LOG("DEBUG",__VA_ARGS__)
+#define OC_WRN(...)   OC_LOG("WARNING",__VA_ARGS__)
+#define OC_ERR(...)   OC_LOG("ERROR", __VA_ARGS__)
+
 #define OC_LOGipaddr(endpoint)                                                 \
   do {                                                                         \
     PRINT("DEBUG: %s <%s:%d>: ", __FILE__, __func__, __LINE__);                \
@@ -78,15 +114,7 @@
       PRINT(" %02X", bytes[i]);                                                \
     PRINT("\n");                                                               \
   } while (0)
-#else
-#define OC_LOG(...)
-#define OC_DBG(...)
-#define OC_WRN(...)
-#define OC_ERR(...)
-#define OC_LOGipaddr(endpoint)
-#define OC_LOGbytes(bytes, length)
 #endif
-
 #ifdef __cplusplus
 }
 #endif
diff -ru iotivity-constrained/util/oc_mmem.c iotivity-constrained_new/util/oc_mmem.c
--- iotivity-constrained/util/oc_mmem.c	2019-03-24 17:21:07.334349254 +0200
+++ iotivity-constrained_new/util/oc_mmem.c	2019-03-24 16:51:04.846062620 +0200
@@ -175,7 +175,7 @@
       break;
     case INT_POOL:
       memmove(m->ptr, m->next->ptr,
-              &ints[OC_INTS_POOL_SIZE - avail_ints] - (int *)m->next->ptr);
+              &ints[OC_INTS_POOL_SIZE - avail_ints] - (int64_t*)m->next->ptr);
       break;
     case DOUBLE_POOL:
       memmove(m->ptr, m->next->ptr,
